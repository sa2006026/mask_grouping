[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "mask_grouping_server"
version = "1.0.0"
description = "SAM implementation for mask grouping with overlap analysis"
readme = "README.md"
authors = [
  {name = "jimmy", email = "jimmy@example.com"}
]
maintainers = [
  {name = "jimmy", email = "jimmy@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
license = {text = "MIT license"}
dependencies = [
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "numpy>=1.24.0",
    "opencv-python>=4.8.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    "Pillow>=10.0.0",
    "segment-anything>=1.0",
    "Werkzeug>=2.3.0",
    "typer>=0.9.0"
]

[project.optional-dependencies]
dev = [
    "coverage",  # testing
    "mypy",  # linting
    "pytest",  # testing
    "ruff",  # linting
    "black",  # formatting
    "isort",  # import sorting
]
server = [
    "waitress>=2.1.0",  # production WSGI server
    "gunicorn>=21.0.0",  # alternative WSGI server
]

[project.urls]
bugs = "https://github.com/jimmy/mask_grouping_server/issues"
changelog = "https://github.com/jimmy/mask_grouping_server/blob/master/CHANGELOG.md"
homepage = "https://github.com/jimmy/mask_grouping_server"
repository = "https://github.com/jimmy/mask_grouping_server"
documentation = "https://github.com/jimmy/mask_grouping_server/blob/master/README.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
"*" = ["*.*"]

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501"]

# Black configuration
[tool.black]
target-version = ['py38']
include = '\.pyi?$'
line-length = 88

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

# Mypy configuration
[tool.mypy]
files = "."
strict = true
warn_unreachable = true
warn_no_return = true
python_version = "3.8"

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true
disable_error_code = "attr-defined"

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "matplotlib.*",
    "sklearn.*",
    "segment_anything.*",
    "torch.*",
    "torchvision.*",
    "PIL.*"
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 